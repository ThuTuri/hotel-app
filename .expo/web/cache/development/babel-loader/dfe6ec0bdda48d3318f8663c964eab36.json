{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useState } from 'react';\nimport AuthContent from \"../components/Auth/AuthContent\";\nimport LoadingOverlay from \"../components/ui/LoadingOverlay\";\nimport { login } from \"../util/auth\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction LoginScreen() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isAuthenticating = _useState2[0],\n      setIsAuthenticating = _useState2[1];\n\n  function loginHandler(_ref) {\n    var email, password;\n    return _regeneratorRuntime.async(function loginHandler$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            email = _ref.email, password = _ref.password;\n            setIsAuthenticating(true);\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(login(email, password));\n\n          case 4:\n            setIsAuthenticating(false);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  if (isAuthenticating) {\n    return _jsx(LoadingOverlay, {\n      message: \"Loggin you in...\"\n    });\n  }\n\n  return _jsx(AuthContent, {\n    isLogin: true,\n    onAuthenticate: loginHandler\n  });\n}\n\nexport default LoginScreen;","map":{"version":3,"sources":["C:/Users/Dell/Downloads/react-native-practical-guide-code-11-auth/react-native-practical-guide-code-11-auth/code/01-starting-code/screens/LoginScreen.js"],"names":["useState","AuthContent","LoadingOverlay","login","LoginScreen","isAuthenticating","setIsAuthenticating","loginHandler","email","password"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,OAAOC,WAAP;AACA,OAAOC,cAAP;AACA,SAAQC,KAAR;;;AAEA,SAASC,WAAT,GAAuB;AACrB,kBAAgDJ,QAAQ,CAAC,KAAD,CAAxD;AAAA;AAAA,MAAOK,gBAAP;AAAA,MAAyBC,mBAAzB;;AAEA,WAAeC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8BC,YAAAA,KAA9B,QAA8BA,KAA9B,EAAqCC,QAArC,QAAqCA,QAArC;AACEH,YAAAA,mBAAmB,CAAC,IAAD,CAAnB;AADF;AAAA,6CAEQH,KAAK,CAACK,KAAD,EAAQC,QAAR,CAFb;;AAAA;AAGEH,YAAAA,mBAAmB,CAAC,KAAD,CAAnB;;AAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA,MAAID,gBAAJ,EAAsB;AACpB,WAAO,KAAC,cAAD;AAAgB,MAAA,OAAO,EAAC;AAAxB,MAAP;AACD;;AAED,SAAO,KAAC,WAAD;AAAa,IAAA,OAAO,MAApB;AAAqB,IAAA,cAAc,EAAEE;AAArC,IAAP;AACD;;AAED,eAAeH,WAAf","sourcesContent":["import { useState } from 'react';\n\nimport AuthContent from '../components/Auth/AuthContent';\nimport LoadingOverlay from '../components/ui/LoadingOverlay';\nimport {login} from '../util/auth'\n\nfunction LoginScreen() {\n  const [isAuthenticating, setIsAuthenticating] = useState(false);\n\n  async function loginHandler({ email, password }) {\n    setIsAuthenticating(true);\n    await login(email, password);\n    setIsAuthenticating(false);\n  }\n\n  if (isAuthenticating) {\n    return <LoadingOverlay message=\"Loggin you in...\" />\n  }\n\n  return <AuthContent isLogin onAuthenticate={loginHandler} />;\n}\n\nexport default LoginScreen;\n"]},"metadata":{},"sourceType":"module"}