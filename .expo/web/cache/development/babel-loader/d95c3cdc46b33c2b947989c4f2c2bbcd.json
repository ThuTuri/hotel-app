{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useState, useContext } from 'react';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport AuthContent from \"../../components/Auth/AuthContent\";\nimport LoadingOverlay from \"../../components/ui/LoadingOverlay\";\nimport { AuthContext } from \"../../store/auth-context\";\nimport { login } from \"../../util/auth\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction LoginScreen(_ref) {\n  var naviga = _ref.naviga;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isAuthenticating = _useState2[0],\n      setIsAuthenticating = _useState2[1];\n\n  var authCtx = useContext(AuthContext);\n\n  function loginHandler(_ref2) {\n    var email, password, navigation, token;\n    return _regeneratorRuntime.async(function loginHandler$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            email = _ref2.email, password = _ref2.password, navigation = _ref2.navigation;\n            setIsAuthenticating(true);\n            _context.prev = 2;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(login(email, password));\n\n          case 5:\n            token = _context.sent;\n            authCtx.authenticate(token);\n            navigation.navigate('Home');\n            _context.next = 14;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](2);\n            Alert.alert('Authentication failed', 'Please check your credentials or try again later!');\n            setIsAuthenticating(false);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[2, 10]], Promise);\n  }\n\n  if (isAuthenticating) {\n    return _jsx(LoadingOverlay, {\n      message: \"Loggin you in...\"\n    });\n  }\n\n  return _jsx(AuthContent, {\n    isLogin: true,\n    onAuthenticate: loginHandler\n  });\n}\n\nexport default LoginScreen;","map":{"version":3,"sources":["C:/Users/Dell/Documents/DoAn/hotel-app/src/screens/login/LoginScreen.js"],"names":["useState","useContext","AuthContent","LoadingOverlay","AuthContext","login","LoginScreen","naviga","isAuthenticating","setIsAuthenticating","authCtx","loginHandler","email","password","navigation","token","authenticate","navigate","Alert","alert"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,UAAnB,QAAqC,OAArC;;AAGA,OAAOC,WAAP;AACA,OAAOC,cAAP;AACA,SAASC,WAAT;AACA,SAASC,KAAT;;;AAEA,SAASC,WAAT,OAA+B;AAAA,MAATC,MAAS,QAATA,MAAS;;AAC7B,kBAAgDP,QAAQ,CAAC,KAAD,CAAxD;AAAA;AAAA,MAAOQ,gBAAP;AAAA,MAAyBC,mBAAzB;;AACA,MAAMC,OAAO,GAAGT,UAAU,CAACG,WAAD,CAA1B;;AAEA,WAAeO,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8BC,YAAAA,KAA9B,SAA8BA,KAA9B,EAAqCC,QAArC,SAAqCA,QAArC,EAA+CC,UAA/C,SAA+CA,UAA/C;AACEL,YAAAA,mBAAmB,CAAC,IAAD,CAAnB;AADF;AAAA;AAAA,6CAIwBJ,KAAK,CAACO,KAAD,EAAQC,QAAR,CAJ7B;;AAAA;AAIUE,YAAAA,KAJV;AAKIL,YAAAA,OAAO,CAACM,YAAR,CAAqBD,KAArB;AACAD,YAAAA,UAAU,CAACG,QAAX,CAAoB,MAApB;AANJ;AAAA;;AAAA;AAAA;AAAA;AAQIC,YAAAA,KAAK,CAACC,KAAN,CACE,uBADF,EAEE,mDAFF;AAIAV,YAAAA,mBAAmB,CAAC,KAAD,CAAnB;;AAZJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,MAAID,gBAAJ,EAAsB;AACpB,WAAO,KAAC,cAAD;AAAgB,MAAA,OAAO,EAAC;AAAxB,MAAP;AACD;;AAED,SAAO,KAAC,WAAD;AAAa,IAAA,OAAO,MAApB;AAAqB,IAAA,cAAc,EAAEG;AAArC,IAAP;AACD;;AAED,eAAeL,WAAf","sourcesContent":["import { useState, useContext } from 'react';\nimport { Alert } from 'react-native';\n\nimport AuthContent from '../../components/Auth/AuthContent';\nimport LoadingOverlay from '../../components/ui/LoadingOverlay';\nimport { AuthContext } from '../../store/auth-context';\nimport { login } from '../../util/auth';\n\nfunction LoginScreen({naviga}) {\n  const [isAuthenticating, setIsAuthenticating] = useState(false);\n  const authCtx = useContext(AuthContext);\n\n  async function loginHandler({ email, password, navigation }) {\n    setIsAuthenticating(true);\n\n    try {\n      const token = await login(email, password);\n      authCtx.authenticate(token);\n      navigation.navigate('Home')\n    } catch (error) {\n      Alert.alert(\n        'Authentication failed',\n        'Please check your credentials or try again later!'\n      );\n      setIsAuthenticating(false);\n    }\n  }\n\n  if (isAuthenticating) {\n    return <LoadingOverlay message=\"Loggin you in...\" />\n  }\n\n  return <AuthContent isLogin onAuthenticate={loginHandler} />;\n}\n\nexport default LoginScreen;\n"]},"metadata":{},"sourceType":"module"}