{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useState } from 'react';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport AuthContent from \"../components/Auth/AuthContent\";\nimport LoadingOverlay from \"../components/ui/LoadingOverlay\";\nimport { login } from \"../util/auth\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction LoginScreen() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isAuthenticating = _useState2[0],\n      setIsAuthenticating = _useState2[1];\n\n  var authCtx = useCon;\n\n  function loginHandler(_ref) {\n    var email, password;\n    return _regeneratorRuntime.async(function loginHandler$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            email = _ref.email, password = _ref.password;\n            setIsAuthenticating(true);\n            _context.prev = 2;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(login(email, password));\n\n          case 5:\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](2);\n            Alert.alert('Authentication failed', 'Please check your credentials or try again later!');\n\n          case 10:\n            setIsAuthenticating(false);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[2, 7]], Promise);\n  }\n\n  if (isAuthenticating) {\n    return _jsx(LoadingOverlay, {\n      message: \"Loggin you in...\"\n    });\n  }\n\n  return _jsx(AuthContent, {\n    isLogin: true,\n    onAuthenticate: loginHandler\n  });\n}\n\nexport default LoginScreen;","map":{"version":3,"sources":["C:/Users/Dell/Downloads/react-native-practical-guide-code-11-auth/react-native-practical-guide-code-11-auth/code/01-starting-code/screens/LoginScreen.js"],"names":["useState","AuthContent","LoadingOverlay","login","LoginScreen","isAuthenticating","setIsAuthenticating","authCtx","useCon","loginHandler","email","password","Alert","alert"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAGA,OAAOC,WAAP;AACA,OAAOC,cAAP;AACA,SAASC,KAAT;;;AAEA,SAASC,WAAT,GAAuB;AACrB,kBAAgDJ,QAAQ,CAAC,KAAD,CAAxD;AAAA;AAAA,MAAOK,gBAAP;AAAA,MAAyBC,mBAAzB;;AAEA,MAAMC,OAAO,GAAGC,MAAhB;;AAEA,WAAeC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8BC,YAAAA,KAA9B,QAA8BA,KAA9B,EAAqCC,QAArC,QAAqCA,QAArC;AACEL,YAAAA,mBAAmB,CAAC,IAAD,CAAnB;AADF;AAAA;AAAA,6CAGUH,KAAK,CAACO,KAAD,EAAQC,QAAR,CAHf;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAKIC,YAAAA,KAAK,CAACC,KAAN,CACE,uBADF,EAEE,mDAFF;;AALJ;AAWEP,YAAAA,mBAAmB,CAAC,KAAD,CAAnB;;AAXF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcA,MAAID,gBAAJ,EAAsB;AACpB,WAAO,KAAC,cAAD;AAAgB,MAAA,OAAO,EAAC;AAAxB,MAAP;AACD;;AAED,SAAO,KAAC,WAAD;AAAa,IAAA,OAAO,MAApB;AAAqB,IAAA,cAAc,EAAEI;AAArC,IAAP;AACD;;AAED,eAAeL,WAAf","sourcesContent":["import { useState } from 'react';\nimport { Alert } from 'react-native';\n\nimport AuthContent from '../components/Auth/AuthContent';\nimport LoadingOverlay from '../components/ui/LoadingOverlay';\nimport { login } from '../util/auth'\n\nfunction LoginScreen() {\n  const [isAuthenticating, setIsAuthenticating] = useState(false);\n\n  const authCtx = useCon\n\n  async function loginHandler({ email, password }) {\n    setIsAuthenticating(true);\n    try {\n      await login(email, password);\n    } catch (error) {\n      Alert.alert(\n        'Authentication failed',\n        'Please check your credentials or try again later!'\n      );\n    }\n\n    setIsAuthenticating(false);\n  }\n\n  if (isAuthenticating) {\n    return <LoadingOverlay message=\"Loggin you in...\" />\n  }\n\n  return <AuthContent isLogin onAuthenticate={loginHandler} />;\n}\n\nexport default LoginScreen;\n"]},"metadata":{},"sourceType":"module"}